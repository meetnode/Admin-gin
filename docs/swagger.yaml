basePath: /api
definitions:
  controller.ChangePasswordRequest:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
  controller.ForgotPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  controller.LoginCred:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  controller.ResetPasswordRequest:
    properties:
      new_password:
        type: string
      token:
        type: string
    required:
    - new_password
    - token
    type: object
  controller.RolePermissionRequest:
    properties:
      permission_ids:
        items:
          type: integer
        type: array
      role_id:
        type: integer
    required:
    - permission_ids
    - role_id
    type: object
  controller.UpdateUserRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  models.Permission:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  models.Role:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      permissions:
        items:
          $ref: '#/definitions/models.Permission'
        type: array
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      roles:
        items:
          $ref: '#/definitions/models.Role'
        type: array
      status:
        type: string
    type: object
  models.UserHasRole:
    properties:
      role:
        $ref: '#/definitions/models.Role'
      role_id:
        type: integer
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
host: localhost:5000
info:
  contact:
    email: meetnode@gmail.com
    name: Meet Suthar
    url: https://github.com/meetnode
  description: Admin API for user, role and permission management
  termsOfService: http://swagger.io/terms/
  title: Admin API
  version: "1.0"
paths:
  /forgot-password:
    post:
      consumes:
      - application/json
      description: Send password reset email to user
      parameters:
      - description: Email address
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/controller.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: message
          schema:
            additionalProperties: true
            type: object
        "400":
          description: error
          schema:
            additionalProperties: true
            type: object
        "500":
          description: error
          schema:
            additionalProperties: true
            type: object
      summary: Request password reset
      tags:
      - Authentication
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/controller.LoginCred'
      produces:
      - application/json
      responses:
        "200":
          description: token and user data
          schema:
            additionalProperties: true
            type: object
        "400":
          description: error
          schema:
            additionalProperties: true
            type: object
        "500":
          description: error
          schema:
            additionalProperties: true
            type: object
      summary: User login
      tags:
      - Authentication
  /permissions:
    get:
      consumes:
      - application/json
      description: Get a list of all permissions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Permission'
            type: array
        "500":
          description: error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all permissions
      tags:
      - Permissions
    post:
      consumes:
      - application/json
      description: Create a new permission
      parameters:
      - description: Permission data
        in: body
        name: permission
        required: true
        schema:
          $ref: '#/definitions/models.Permission'
      produces:
      - application/json
      responses:
        "200":
          description: message
          schema:
            additionalProperties: true
            type: object
        "400":
          description: error
          schema:
            additionalProperties: true
            type: object
        "500":
          description: error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new permission
      tags:
      - Permissions
  /permissions/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a permission by ID
      parameters:
      - description: Permission ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: message
          schema:
            additionalProperties: true
            type: object
        "400":
          description: error
          schema:
            additionalProperties: true
            type: object
        "500":
          description: error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete permission
      tags:
      - Permissions
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: message
          schema:
            additionalProperties: true
            type: object
        "400":
          description: error
          schema:
            additionalProperties: true
            type: object
        "500":
          description: error
          schema:
            additionalProperties: true
            type: object
      summary: User registration
      tags:
      - Authentication
  /reset-password:
    post:
      consumes:
      - application/json
      description: Reset user password with token
      parameters:
      - description: Reset password data
        in: body
        name: resetData
        required: true
        schema:
          $ref: '#/definitions/controller.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: message
          schema:
            additionalProperties: true
            type: object
        "400":
          description: error
          schema:
            additionalProperties: true
            type: object
        "500":
          description: error
          schema:
            additionalProperties: true
            type: object
      summary: Reset user password
      tags:
      - Authentication
  /roles:
    get:
      consumes:
      - application/json
      description: Get a list of all roles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Role'
            type: array
        "500":
          description: error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all roles
      tags:
      - Roles
    post:
      consumes:
      - application/json
      description: Create a new role
      parameters:
      - description: Role data
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/models.Role'
      produces:
      - application/json
      responses:
        "200":
          description: message
          schema:
            additionalProperties: true
            type: object
        "400":
          description: error
          schema:
            additionalProperties: true
            type: object
        "500":
          description: error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new role
      tags:
      - Roles
  /roles/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a role by ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: message
          schema:
            additionalProperties: true
            type: object
        "400":
          description: error
          schema:
            additionalProperties: true
            type: object
        "500":
          description: error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete role
      tags:
      - Roles
  /roles/permissions:
    post:
      consumes:
      - application/json
      description: Assign multiple permissions to a specific role
      parameters:
      - description: Role permission assignment
        in: body
        name: rolePermission
        required: true
        schema:
          $ref: '#/definitions/controller.RolePermissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: message
          schema:
            additionalProperties: true
            type: object
        "400":
          description: error
          schema:
            additionalProperties: true
            type: object
        "500":
          description: error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Assign permissions to role
      tags:
      - Roles
  /users:
    get:
      consumes:
      - application/json
      description: Get a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: users
          schema:
            additionalProperties: true
            type: object
        "500":
          description: error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - Users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: message
          schema:
            additionalProperties: true
            type: object
        "400":
          description: error
          schema:
            additionalProperties: true
            type: object
        "500":
          description: error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get user information by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: error
          schema:
            additionalProperties: true
            type: object
        "500":
          description: error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update user data by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controller.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: message
          schema:
            additionalProperties: true
            type: object
        "400":
          description: error
          schema:
            additionalProperties: true
            type: object
        "500":
          description: error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update user information
      tags:
      - Users
  /users/{id}/assign-role:
    post:
      consumes:
      - application/json
      description: Assign a role to a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User role assignment
        in: body
        name: userRole
        required: true
        schema:
          $ref: '#/definitions/models.UserHasRole'
      produces:
      - application/json
      responses:
        "200":
          description: message
          schema:
            additionalProperties: true
            type: object
        "400":
          description: error
          schema:
            additionalProperties: true
            type: object
        "500":
          description: error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Assign role to user
      tags:
      - Users
  /users/{id}/password:
    put:
      consumes:
      - application/json
      description: Change password for a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Password change data
        in: body
        name: passwordData
        required: true
        schema:
          $ref: '#/definitions/controller.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: message
          schema:
            additionalProperties: true
            type: object
        "400":
          description: error
          schema:
            additionalProperties: true
            type: object
        "500":
          description: error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - Users
  /verify:
    get:
      consumes:
      - application/json
      description: Verify user email with token
      parameters:
      - description: Verification token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: message
          schema:
            additionalProperties: true
            type: object
        "500":
          description: error
          schema:
            additionalProperties: true
            type: object
      summary: Verify email address
      tags:
      - Authentication
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
